<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABU
        CgAAAk1TRnQBSQFMAgEBAgEAATgBAAE4AQABGwEAARsBAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFs
        AwABGwMAAQEBAAEgBQABkAEt/wD/AP8A6QADBAEFA0MBdwMDAQT/AKgAAQEDUAGdA1EBpwMDAQT/AKUA
        AwEBAgNQAZ0DUQGnAwMBBP8AVQADDwEUAyEBMAMnAToDIgEyAxEBFzwAAwEBAgNQAZ0DUQGnAwMBBAMA
        AQEDJAE2A0QBewNTAaoDVwHFA1cBzQNWAcIDUAGkA0EBcgMeASv/ABkAAwEBAgMvAUkDUQGgA1EB4ANT
        AdcDVQG5A1QBrwNVAbcDVwHUA0sB4wNSAagDMwFSAwQBBTAAAwEBAgNQAZ0DUQGnAykBPwNVAbwDQgF1
        AysBQgMaASQDFQQdASkDLgFIA0UBfgNXAcoDVwHNAzYBWQMBAQL/AAkAAzIBUQNVAdUDVQGyAzMBUwML
        AQ8DEAEVAzMBUwM8AWgDMwFSAw8BFAMIAQsDMAFMA1IBqQNUAdsDOQFfAwABASsABAEBAgNQAZ0DUQGn
        AwMBBAMKAQ4DRQF9A1YB0wNFAekDRQHpA1gBzwNCAXUDBwEKAyEBMANUAa8DVgHGAxsBJvwAAwsBDwNU
        AasDVwG/AyABLgQAAwoBDQNOAZcDTwHfA1ABmgNGAYEDTwGcA1EB4ANOAZQDCAELBAADGgEkA1UBsQNV
        AboDEQEXIAADOAFcA1cBwAQAAwEBAgNQAZ0DUQGnAzUBWANIAYUDFgEeCAADGQEjA0sBkANVAdUDGQEj
        BAADMQRPAd8DLgFI9AADEwEaA1cB0QNDAXgDAQECBAADCgENA1cBywNGAYADBAEGDAADBQEHA0gBhQNW
        AccDCAELCAADPAFmA1IB2QMaASUYAAM7AWQDVwHRAxIBGQgAAwEBAgNQAZ0DUQGnAwMBBBQAAzABTQNT
        AdcDCgEOBAADGwEmA1QB2gMxAU7sAAMTARoDVQHVAzcBWgwAA1ABmgNFAX8cAANIAYUDTgGUDAADLgFI
        A1EB3AMbASYQAAM7AWQDVgHQAxABFgwAA0cBggMgAS4DUAGdA1EBpwMDAQQUAANHAYMDSAGGCAADGAEi
        A1QB2gMxAU7kAAMTARoDVQHVAzYBWQwAAxIBGQNSAd0DBAEFHAADBQEHA1EB4AMPARQMAAMuAUcDUQHc
        AxsBJggAAzsBZANWAdADEAEWDAADBAEGA0sB5QMHAQkDAQECA1ABnQNRAacDAwEEEAADDgETA04B4QMA
        AQEIAAMYASIDVAHaAzEBTtwAAxMBGgNVAdUDNgFZEAADNQFYA00BlSQAA08BmwMzAVIQAAMuAUcDUQHc
        AxsBJgM7AWQDVwHRAxABFRAAAx4BKwNXAcAIAAMBAQIDUAGdA1EBpwMDAQQQAANWAdMDEgEYDAADGAEi
        A1QB2gMxAU7YAANWAb4DSgGLFAADPwFvA0QBegMIAQsDMQFPHAADRgGBAzwBaBQAA0oBigNXAb8DTgGZ
        A1MBrAMDAQQQAAMhATEDVQG5DAADAQECA1ABnQNRAacDAwEEDAADVwHMAxYBHg8AAQEDUAGeA1QBq9gA
        AxsBJgNRAdwDLgFHEAADNwFaA0wBkwMTARoDVwHUHAADUAGaAzMBUxAAAzYBWQNWAdYDFAEbAwEBAgNP
        AZsDUgGpAwMBBAwAAwwBEANPAd8DAAEBDAADAQECA1ABnQNRAacDAwEEBAADBAEFA0cB5wMEAQULAAEB
        A0wBkQNVAbEDBAEG3AADGwEmA1EB3AMuAUcMAAMTARoDUQHcAwMBBANWAb4DOwFkFAADBAEGA08B3wMQ
        ARYMAAM2AVkDVgHWAxQBGwgAAwEBAgNPAZsDUgGpAwMBBAwAA1UBvAMsAUQQAAMBAQIDUAGdA1EBpwMD
        AQQDNQFXA1MBqgsAAQEDTAGRA1UBsgMEAQbkAAMbASYDUQHcAy4BSAwAA1ABnwNEAXkDEgEZA1cBvwNX
        AdQDMQFPDAADRgGAA04BmAwAAzcBWgNVAdUDFAEbEAADAQECA1ABmgNSAakDBAEFCAADJgE5A1YB1gMO
        ARMQAAMBAQIDUAGdA1EBpwNIAYcDHgErBwABAQNMAZIDVQGxAwQBBuwAAxoBJQNSAdkDPAFmCAADDAEQ
        A1gBzwNEAXkDAwEEAxMBGgMIAQsEAAMEAQUDRQF+A1cBywMKAQ0EAAMBAQIDQwF4A1YB0gMTARoYAAMB
        AQIDTQGWA1YBuAMNARIIAAM8AWgDVgHTAyQBNhAAAygBPANVAbIDUQGnAwMBBAMIAQsDTwGlA1MBrQME
        AQb0AAMRARcDVQG6A1UBsQMaASQEAAMMARADUAGeA1EB3ANMAZMDRAF6A04BlANSAd0DTwGbAwoBDgQA
        Ax8BLQNWAb4DVAGrAwsBDyQAAz8BbwNSAd0DNQFXAwABAQQAAysBQgNXAc0DVwHMA08BnANQAZ8DVgHS
        A1cBxQMaASQDUAGdA1EBpwNRAaADRwGDAwIBA/8AAQEDOQFfA1QB2wNSAakDMAFMAwgBCwMTARoDNwFa
        Az8BbwM2AVkDEgEZAwoBDgMzAVMDVQGyA1UB1QMzAVIwAAMcASgDVQGyA1YB0wNAAXADGQEjBAADGgEl
        AzEBTgMwAUwDGAEhAxYBHwM4AVwDBQEHA1ABnQNRAacDAwEE/wAJAAMEAQUDMwFSA1EBpwNLAeMDVwHU
        A1UBtwNUAa8DVQG5A1MB1wNRAeADUQGhAy8BSQMBAQI8AAMdASoDSAGGA1cBzQNHAecDVwHMA1YBwgNX
        AcsDSQHmA1cB0QNKAYsDBQEHAwEBAgNQAZ0DUQGnAwMBBP8AFQADEQEXAyIBMgMnAToDIQEwAw8BFFgA
        AwQBBQMWAR4DHAEoAxYBHwMEAQYQAAMBAQIDUAGdA1EBpwMDAQT/AKUAAwEBAgNQAZ0DUQGnAwMBBP8A
        pQADAQECA1ABnQNRAacDAQEC/wClAAMBAQIDQgF1AwcBCf8A/wD/AP8AQAABQgFNAT4HAAE+AwABKAMA
        AWwDAAEbAwABAQEAAQEFAAGwAQEWAAP/AQAG/wH8CQAG/wH8CQAD/wH4Av8B/AkAA/8B+AF/Af8B/AkA
        A/8B/AE/Af8B/AkAAf8B4AH/Af4BAAEHAfwJAAH+AQABDwH/AgAB/AkAAfwBAAEDAf8CAAF8CQAB8AGA
        ASEB/gFAAcIBPAkAAeEBDgEYAfwBYQHxARwJAAHHAT8BnAF4AeAB+QGMCQABjgE/AY4BMQHAAXgBxAkA
        AR4BfwHPAQMBzAE8AeAJAAE+AR8BzwGDAc4BHAHgCQABHgEfAc8BAQHHAQgBwAkAAY4BDwGOATAB5wGB
        AYQJAAHHAQMBnAF4AWMBwQEMCQAB4wECARAB/AExAeABHAkAAfABgAEhAf8BCAEAATwJAAH4AQABBwH/
        AYIBAAF8CQAB/gEAAQ8B/wHgAQABPAkAAf8B4AL/AfwBHgEcCQAG/wEMCQAG/wGECQAG/wHECQAG/wH8
        CQAG/wH8CQAL
</value>
  </data>
</root>